{"version":3,"sources":["components/flat.js","components/marker.js","App.js","registerServiceWorker.js","index.js"],"names":["Flat","handleClick","_this","props","selectFlat","flat","title","concat","this","price","priceCurrency","name","style","backgroundImage","imageUrl","react_default","a","createElement","className","onClick","React","Component","Marker","classes","selected","rating","App","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","setState","selectedFlat","handleSearch","event","search","target","value","flats","state","allFlats","filter","RegExp","exec","_this2","fetch","then","response","json","data","_this3","center","lat","lng","type","placeholder","onChange","map","src_components_flat","key","id","lib_default","zoom","components_marker","text","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","catch","error","ReactDOM","render","src_App_0","document","getElementById","URL","process","origin","addEventListener","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.3a30b808.chunk.js","sourcesContent":["import React from 'react';\r\nimport \"./flat.css\";\r\n\r\nclass Flat extends React.Component {\r\nhandleClick = () => {\r\n  this.props.selectFlat(this.props.flat);\r\n}\r\n\r\n\r\n  render(){\r\n\r\n    const title = `${this.props.flat.price} ${this.props.flat.priceCurrency} - ${this.props.flat.name}`;\r\n\r\n    const style = {\r\n      backgroundImage: `url('${this.props.flat.imageUrl}')`\r\n    };\r\n\r\n\r\n    return (\r\n      <div className=\"flat\" onClick={this.handleClick}>\r\n        <div className=\"flat-picture\" style={style}></div>\r\n        <div className=\"flat-title\">\r\n          {title}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Flat;","import React, { Component } from 'react';\r\nimport './marker.css';\r\n\r\nclass Marker extends Component {\r\n  render(){\r\n\r\n    let classes = \"marker\";\r\n    if (this.props.selected) {\r\n      classes += \" selected\";\r\n    }\r\n\r\n\r\n\r\n    return (\r\n      <div className={classes}>\r\n        {this.props.rating}\r\n      </div>\r\n    );\r\n  }\r\n\r\n}\r\n\r\nexport default Marker;","import React, { Component } from 'react';\r\nimport GoogleMapReact from 'google-map-react';\r\nimport './App.css';\r\nimport Flat from './components/flat';\r\nimport Marker from './components/marker';\r\n\r\nclass App extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      flats: [],\r\n      allFlats: [],\r\n      selectedFlat: null,\r\n      search: ''\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    let url = \"https://raw.githubusercontent.com/konqa/flats-boilerplate/master/flats.json\";\r\n    fetch(url) // AJAX\r\n    .then(response => response.json())\r\n    .then((data) => {\r\n      this.setState({\r\n        flats: data,\r\n        allFlats: data\r\n      })\r\n    })\r\n  }\r\n\r\n  selectFlat = (flat) => {\r\n    this.setState({    \r\n      selectedFlat: flat\r\n    })\r\n  }\r\n\r\n  handleSearch = (event) => {\r\n    // console.log(event.target.value);\r\n    this.setState({\r\n      search: event.target.value,\r\n      flats: this.state.allFlats.filter((flat) => new RegExp(event.target.value, \"i\").exec(flat.name))\r\n    })\r\n  }\r\n\r\n  render() {\r\n\r\n    let center = {\r\n      lat: -46.410744,\r\n      lng: 168.3715803\r\n    }\r\n\r\n    if(this.state.selectedFlat){\r\n      center = {\r\n        lat: this.state.selectedFlat.lat,\r\n        lng: this.state.selectedFlat.lng\r\n      }\r\n    }\r\n\r\n    return (\r\n      <div className=\"App\">\r\n        <div className=\"main\">\r\n\r\n          <div className=\"search\">\r\n            <input type=\"text\"\r\n            placeholder=\"Search...\"\r\n            value={this.state.search}\r\n            onChange={this.handleSearch}\r\n            />\r\n\r\n          </div>\r\n\r\n          <div className=\"flats\">\r\n            {this.state.flats.map((flat) => {\r\n              return <Flat \r\n              key={flat.id} \r\n              flat={flat} \r\n              selectFlat={\r\n                this.selectFlat\r\n              } />\r\n            })}\r\n          </div>\r\n\r\n          </div>\r\n\r\n          <div className=\"map\">\r\n            <GoogleMapReact\r\n            // bootstrapURLKeys={{ key: /* YOUR KEY HERE */ }}\r\n            center={center}\r\n            zoom={14}\r\n            >\r\n            {this.state.flats.map((flat) => {\r\n              return <Marker \r\n              key={flat.id} \r\n              lat={flat.lat} \r\n              lng={flat.lng} \r\n              rating={flat.rating} \r\n              text={flat.price}\r\n              selected={flat === this.state.selectedFlat}\r\n              />\r\n            })}\r\n            </GoogleMapReact>\r\n          </div>\r\n\r\n        </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nregisterServiceWorker();\n"],"sourceRoot":""}